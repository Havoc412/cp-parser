行号	类型		值
-------------------------------------
1	KEYWORD_INT	int
1	IDENTIFIER	factorial
1	DELIMITER_OPEN_PARENTHESIS	(
1	KEYWORD_INT	int
1	IDENTIFIER	n
1	DELIMITER_CLOSE_PARENTHESIS	)
1	DELIMITER_BEGIN_BRACE	{
1	KEYWORD_IF	if
2	DELIMITER_OPEN_PARENTHESIS	(
2	IDENTIFIER	n
2	OPERATOR_LESS_EQUAL	<=
2	CONSTANT_INTEGER	1
2	DELIMITER_CLOSE_PARENTHESIS	)
2	DELIMITER_BEGIN_BRACE	{
2	KEYWORD_RETURN	return
3	CONSTANT_INTEGER	1
3	DELIMITER_SEMICOLON	;
3	DELIMITER_END_BRACE	}
4	KEYWORD_ELSE	else
4	DELIMITER_BEGIN_BRACE	{
4	KEYWORD_RETURN	return
5	IDENTIFIER	n
5	OPERATOR_MULTIPLY	*
5	IDENTIFIER	factorial
5	DELIMITER_OPEN_PARENTHESIS	(
5	IDENTIFIER	n
5	OPERATOR_MINUS	-
5	CONSTANT_INTEGER	1
5	DELIMITER_CLOSE_PARENTHESIS	)
5	DELIMITER_SEMICOLON	;
5	DELIMITER_END_BRACE	}
6	DELIMITER_END_BRACE	}
7	KEYWORD_INT	int
9	IDENTIFIER	fibonacci
9	DELIMITER_OPEN_PARENTHESIS	(
9	KEYWORD_INT	int
9	IDENTIFIER	n
9	DELIMITER_CLOSE_PARENTHESIS	)
9	DELIMITER_BEGIN_BRACE	{
9	KEYWORD_IF	if
10	DELIMITER_OPEN_PARENTHESIS	(
10	IDENTIFIER	n
10	OPERATOR_LESS_EQUAL	<=
10	CONSTANT_INTEGER	0
10	DELIMITER_CLOSE_PARENTHESIS	)
10	DELIMITER_BEGIN_BRACE	{
10	KEYWORD_RETURN	return
11	CONSTANT_INTEGER	0
11	DELIMITER_SEMICOLON	;
11	DELIMITER_END_BRACE	}
12	KEYWORD_ELSE	else
12	KEYWORD_IF	if
12	DELIMITER_OPEN_PARENTHESIS	(
12	IDENTIFIER	n
12	OPERATOR_EQUAL	==
12	CONSTANT_INTEGER	1
12	DELIMITER_CLOSE_PARENTHESIS	)
12	DELIMITER_BEGIN_BRACE	{
12	KEYWORD_RETURN	return
13	CONSTANT_INTEGER	1
13	DELIMITER_SEMICOLON	;
13	DELIMITER_END_BRACE	}
14	KEYWORD_ELSE	else
14	DELIMITER_BEGIN_BRACE	{
14	KEYWORD_RETURN	return
15	IDENTIFIER	fibonacci
15	DELIMITER_OPEN_PARENTHESIS	(
15	IDENTIFIER	n
15	OPERATOR_MINUS	-
15	CONSTANT_INTEGER	1
15	DELIMITER_CLOSE_PARENTHESIS	)
15	OPERATOR_PLUS	+
15	IDENTIFIER	fibonacci
15	DELIMITER_OPEN_PARENTHESIS	(
15	IDENTIFIER	n
15	OPERATOR_MINUS	-
15	CONSTANT_INTEGER	2
15	DELIMITER_CLOSE_PARENTHESIS	)
15	DELIMITER_SEMICOLON	;
15	DELIMITER_END_BRACE	}
16	DELIMITER_END_BRACE	}
17	KEYWORD_INT	int
19	IDENTIFIER	gcd
19	DELIMITER_OPEN_PARENTHESIS	(
19	KEYWORD_INT	int
19	IDENTIFIER	a
19	DELIMITER_COMMA	,
19	KEYWORD_INT	int
19	IDENTIFIER	b
19	DELIMITER_CLOSE_PARENTHESIS	)
19	DELIMITER_BEGIN_BRACE	{
19	KEYWORD_WHILE	while
20	DELIMITER_OPEN_PARENTHESIS	(
20	IDENTIFIER	b
20	UNDEFINED	!
20	OPERATOR_ASSIGN	=
20	CONSTANT_INTEGER	0
20	DELIMITER_CLOSE_PARENTHESIS	)
20	DELIMITER_BEGIN_BRACE	{
20	KEYWORD_INT	int
21	IDENTIFIER	temp
21	OPERATOR_ASSIGN	=
21	IDENTIFIER	b
21	DELIMITER_SEMICOLON	;
21	IDENTIFIER	b
22	OPERATOR_ASSIGN	=
22	IDENTIFIER	a
22	UNDEFINED	%
22	IDENTIFIER	b
22	DELIMITER_SEMICOLON	;
23	IDENTIFIER	a
23	OPERATOR_ASSIGN	=
23	IDENTIFIER	temp
23	DELIMITER_SEMICOLON	;
23	DELIMITER_END_BRACE	}
24	KEYWORD_RETURN	return
25	IDENTIFIER	a
25	DELIMITER_SEMICOLON	;
25	DELIMITER_END_BRACE	}
26	KEYWORD_INT	int
28	IDENTIFIER	main
28	DELIMITER_OPEN_PARENTHESIS	(
28	DELIMITER_CLOSE_PARENTHESIS	)
28	DELIMITER_BEGIN_BRACE	{
28	KEYWORD_INT	int
29	IDENTIFIER	a
29	OPERATOR_ASSIGN	=
29	CONSTANT_INTEGER	5
29	DELIMITER_SEMICOLON	;
29	KEYWORD_INT	int
30	IDENTIFIER	b
30	OPERATOR_ASSIGN	=
30	CONSTANT_INTEGER	10
30	DELIMITER_SEMICOLON	;
30	KEYWORD_INT	int
31	IDENTIFIER	c
31	DELIMITER_SEMICOLON	;
34	IDENTIFIER	c
34	OPERATOR_ASSIGN	=
34	IDENTIFIER	factorial
34	DELIMITER_OPEN_PARENTHESIS	(
34	IDENTIFIER	a
34	DELIMITER_CLOSE_PARENTHESIS	)
34	DELIMITER_SEMICOLON	;
37	KEYWORD_IF	if
37	DELIMITER_OPEN_PARENTHESIS	(
37	IDENTIFIER	a
37	OPERATOR_LESS_THAN	<
37	IDENTIFIER	b
37	DELIMITER_CLOSE_PARENTHESIS	)
37	KEYWORD_THEN	then
37	DELIMITER_BEGIN_BRACE	{
37	KEYWORD_IF	if
38	DELIMITER_OPEN_PARENTHESIS	(
38	IDENTIFIER	a
38	OPERATOR_GREATER_THAN	>
38	CONSTANT_INTEGER	0
38	DELIMITER_CLOSE_PARENTHESIS	)
38	DELIMITER_BEGIN_BRACE	{
38	IDENTIFIER	c
39	OPERATOR_ASSIGN	=
39	IDENTIFIER	a
39	OPERATOR_PLUS	+
39	IDENTIFIER	b
39	DELIMITER_SEMICOLON	;
39	DELIMITER_END_BRACE	}
40	KEYWORD_ELSE	else
40	DELIMITER_BEGIN_BRACE	{
40	IDENTIFIER	c
41	OPERATOR_ASSIGN	=
41	IDENTIFIER	b
41	OPERATOR_MINUS	-
41	IDENTIFIER	a
41	DELIMITER_SEMICOLON	;
41	DELIMITER_END_BRACE	}
42	DELIMITER_END_BRACE	}
43	KEYWORD_ELSE	else
43	DELIMITER_BEGIN_BRACE	{
43	KEYWORD_WHILE	while
44	DELIMITER_OPEN_PARENTHESIS	(
44	IDENTIFIER	a
44	OPERATOR_GREATER_THAN	>
44	CONSTANT_INTEGER	0
44	DELIMITER_CLOSE_PARENTHESIS	)
44	DELIMITER_BEGIN_BRACE	{
44	IDENTIFIER	a
45	OPERATOR_ASSIGN	=
45	IDENTIFIER	a
45	OPERATOR_MINUS	-
45	CONSTANT_INTEGER	1
45	DELIMITER_SEMICOLON	;
45	DELIMITER_END_BRACE	}
46	DELIMITER_END_BRACE	}
47	KEYWORD_RETURN	return
49	CONSTANT_INTEGER	0
49	DELIMITER_SEMICOLON	;
49	DELIMITER_END_BRACE	}
50	END_OF_FILE	EOF
