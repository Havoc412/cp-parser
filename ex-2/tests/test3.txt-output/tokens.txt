行号	类型		值
-------------------------------------
1	IDENTIFIER	factorial
1	DELIMITER_OPEN_PARENTHESIS	(
1	KEYWORD_INT	int
1	IDENTIFIER	n
1	DELIMITER_CLOSE_PARENTHESIS	)
1	DELIMITER_BEGIN_BRACE	{
1	KEYWORD_IF	if
2	DELIMITER_OPEN_PARENTHESIS	(
2	IDENTIFIER	n
2	OPERATOR_LESS_EQUAL	<=
2	CONSTANT_INTEGER	1
2	DELIMITER_CLOSE_PARENTHESIS	)
2	DELIMITER_BEGIN_BRACE	{
2	KEYWORD_RETURN	return
3	CONSTANT_INTEGER	1
3	DELIMITER_SEMICOLON	;
3	DELIMITER_END_BRACE	}
4	KEYWORD_ELSE	else
4	DELIMITER_BEGIN_BRACE	{
4	KEYWORD_RETURN	return
5	IDENTIFIER	n
5	OPERATOR_MULTIPLY	*
5	IDENTIFIER	factorial
5	DELIMITER_OPEN_PARENTHESIS	(
5	IDENTIFIER	n
5	OPERATOR_MINUS	-
5	CONSTANT_INTEGER	1
5	DELIMITER_CLOSE_PARENTHESIS	)
5	DELIMITER_SEMICOLON	;
5	DELIMITER_END_BRACE	}
6	DELIMITER_END_BRACE	}
7	KEYWORD_INT	int
9	IDENTIFIER	fibonacci
9	DELIMITER_OPEN_PARENTHESIS	(
9	KEYWORD_INT	int
9	IDENTIFIER	n
9	DELIMITER_CLOSE_PARENTHESIS	)
9	DELIMITER_BEGIN_BRACE	{
9	KEYWORD_IF	if
10	DELIMITER_OPEN_PARENTHESIS	(
10	IDENTIFIER	n
10	OPERATOR_LESS_EQUAL	<=
10	CONSTANT_INTEGER	0
10	DELIMITER_CLOSE_PARENTHESIS	)
10	DELIMITER_BEGIN_BRACE	{
10	KEYWORD_RETURN	return
11	CONSTANT_INTEGER	0
11	DELIMITER_SEMICOLON	;
11	DELIMITER_END_BRACE	}
12	KEYWORD_ELSE	else
12	KEYWORD_IF	if
12	DELIMITER_OPEN_PARENTHESIS	(
12	IDENTIFIER	n
12	OPERATOR_EQUAL	==
12	CONSTANT_INTEGER	1
12	DELIMITER_CLOSE_PARENTHESIS	)
12	DELIMITER_BEGIN_BRACE	{
12	KEYWORD_RETURN	return
13	CONSTANT_INTEGER	1
13	DELIMITER_SEMICOLON	;
13	DELIMITER_END_BRACE	}
14	KEYWORD_ELSE	else
14	DELIMITER_BEGIN_BRACE	{
14	KEYWORD_RETURN	return
15	IDENTIFIER	fibonacci
15	DELIMITER_OPEN_PARENTHESIS	(
15	IDENTIFIER	n
15	OPERATOR_MINUS	-
15	CONSTANT_INTEGER	1
15	DELIMITER_CLOSE_PARENTHESIS	)
15	OPERATOR_PLUS	+
15	IDENTIFIER	fibonacci
15	DELIMITER_OPEN_PARENTHESIS	(
15	IDENTIFIER	n
15	OPERATOR_MINUS	-
15	CONSTANT_INTEGER	2
15	DELIMITER_CLOSE_PARENTHESIS	)
15	DELIMITER_SEMICOLON	;
15	DELIMITER_END_BRACE	}
16	DELIMITER_END_BRACE	}
17	KEYWORD_INT	int
19	IDENTIFIER	gcd
19	DELIMITER_OPEN_PARENTHESIS	(
19	KEYWORD_INT	int
19	IDENTIFIER	a
19	DELIMITER_COMMA	,
19	KEYWORD_INT	int
19	IDENTIFIER	b
19	DELIMITER_CLOSE_PARENTHESIS	)
19	DELIMITER_BEGIN_BRACE	{
19	KEYWORD_WHILE	while
20	DELIMITER_OPEN_PARENTHESIS	(
20	IDENTIFIER	b
20	UNDEFINED	!
20	OPERATOR_ASSIGN	=
20	CONSTANT_INTEGER	0
20	DELIMITER_CLOSE_PARENTHESIS	)
20	DELIMITER_BEGIN_BRACE	{
20	KEYWORD_INT	int
21	IDENTIFIER	temp
21	OPERATOR_ASSIGN	=
21	IDENTIFIER	b
21	DELIMITER_SEMICOLON	;
21	IDENTIFIER	b
22	OPERATOR_ASSIGN	=
22	IDENTIFIER	a
22	UNDEFINED	%
22	IDENTIFIER	b
22	DELIMITER_SEMICOLON	;
23	IDENTIFIER	a
23	OPERATOR_ASSIGN	=
23	IDENTIFIER	temp
23	DELIMITER_SEMICOLON	;
23	DELIMITER_END_BRACE	}
24	KEYWORD_RETURN	return
25	IDENTIFIER	a
25	DELIMITER_SEMICOLON	;
25	DELIMITER_END_BRACE	}
26	KEYWORD_INT	int
28	IDENTIFIER	main
28	DELIMITER_OPEN_PARENTHESIS	(
28	DELIMITER_CLOSE_PARENTHESIS	)
28	DELIMITER_BEGIN_BRACE	{
28	KEYWORD_INT	int
29	IDENTIFIER	a
29	OPERATOR_ASSIGN	=
29	CONSTANT_INTEGER	10
29	DELIMITER_SEMICOLON	;
29	KEYWORD_INT	int
30	IDENTIFIER	b
30	OPERATOR_ASSIGN	=
30	CONSTANT_INTEGER	20
30	DELIMITER_SEMICOLON	;
33	KEYWORD_IF	if
33	IDENTIFIER	a
33	OPERATOR_GREATER_THAN	>
33	IDENTIFIER	b
33	KEYWORD_THEN	then
33	DELIMITER_BEGIN_BRACE	{
33	IDENTIFIER	a
34	OPERATOR_ASSIGN	=
34	IDENTIFIER	a
34	OPERATOR_PLUS	+
34	CONSTANT_INTEGER	1
34	DELIMITER_SEMICOLON	;
34	DELIMITER_END_BRACE	}
35	KEYWORD_ELSE	else
35	DELIMITER_BEGIN_BRACE	{
35	IDENTIFIER	b
36	OPERATOR_ASSIGN	=
36	IDENTIFIER	b
36	OPERATOR_MINUS	-
36	CONSTANT_INTEGER	1
36	DELIMITER_SEMICOLON	;
36	DELIMITER_END_BRACE	}
40	KEYWORD_IF	if
40	DELIMITER_OPEN_PARENTHESIS	(
40	IDENTIFIER	a
40	OPERATOR_EQUAL	==
40	IDENTIFIER	b
40	DELIMITER_BEGIN_BRACE	{
40	IDENTIFIER	a
41	OPERATOR_ASSIGN	=
41	IDENTIFIER	a
41	OPERATOR_MULTIPLY	*
41	CONSTANT_INTEGER	2
41	DELIMITER_SEMICOLON	;
41	DELIMITER_END_BRACE	}
45	KEYWORD_IF	if
45	DELIMITER_OPEN_PARENTHESIS	(
45	IDENTIFIER	a
45	OPERATOR_LESS_THAN	<
45	IDENTIFIER	b
45	KEYWORD_THEN	then
45	IDENTIFIER	a
46	OPERATOR_ASSIGN	=
46	IDENTIFIER	a
46	OPERATOR_MINUS	-
46	CONSTANT_INTEGER	1
46	DELIMITER_SEMICOLON	;
49	KEYWORD_IF	if
49	DELIMITER_OPEN_PARENTHESIS	(
49	IDENTIFIER	a
49	OPERATOR_GREATER_EQUAL	>=
49	IDENTIFIER	b
49	DELIMITER_CLOSE_PARENTHESIS	)
49	KEYWORD_THEN	then
49	DELIMITER_BEGIN_BRACE	{
49	IDENTIFIER	a
50	OPERATOR_ASSIGN	=
50	CONSTANT_INTEGER	0
50	DELIMITER_SEMICOLON	;
50	DELIMITER_END_BRACE	}
51	KEYWORD_ELSE	else
51	DELIMITER_BEGIN_BRACE	{
51	IDENTIFIER	b
52	OPERATOR_ASSIGN	=
52	CONSTANT_INTEGER	0
52	DELIMITER_SEMICOLON	;
52	DELIMITER_END_BRACE	}
56	KEYWORD_WHILE	while
56	IDENTIFIER	a
56	OPERATOR_LESS_THAN	<
56	IDENTIFIER	b
56	DELIMITER_CLOSE_PARENTHESIS	)
56	DELIMITER_BEGIN_BRACE	{
56	IDENTIFIER	a
57	OPERATOR_ASSIGN	=
57	IDENTIFIER	a
57	OPERATOR_PLUS	+
57	CONSTANT_INTEGER	1
57	DELIMITER_SEMICOLON	;
57	DELIMITER_END_BRACE	}
58	KEYWORD_RETURN	return
60	CONSTANT_INTEGER	0
60	DELIMITER_SEMICOLON	;
60	DELIMITER_END_BRACE	}
64	KEYWORD_FLOAT	float
64	IDENTIFIER	calculate
64	DELIMITER_OPEN_PARENTHESIS	(
64	KEYWORD_INT	int
64	IDENTIFIER	x
64	DELIMITER_COMMA	,
64	KEYWORD_FLOAT	float
64	DELIMITER_CLOSE_PARENTHESIS	)
64	DELIMITER_BEGIN_BRACE	{
64	KEYWORD_RETURN	return
65	IDENTIFIER	x
65	OPERATOR_MULTIPLY	*
65	CONSTANT_DOUBLE	2.5
65	DELIMITER_SEMICOLON	;
65	DELIMITER_END_BRACE	}
66	END_OF_FILE	EOF
